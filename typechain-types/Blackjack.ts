/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface BlackjackInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "dealInitialCards"
      | "doubleDown"
      | "getDealerHand"
      | "getGameState"
      | "getHandValue"
      | "getHandValue2"
      | "getPlayerHand"
      | "getPlayerHand2"
      | "hitMultiple"
      | "placeBet"
      | "playerGames"
      | "resetGame"
      | "split"
      | "stand"
      | "takeInsurance"
      | "withdrawAll"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DealerBust"
      | "DealerCardDealt"
      | "DoubleDown"
      | "GameReset"
      | "GameResult"
      | "GameStarted"
      | "InsuranceTaken"
      | "PlayerBust"
      | "PlayerCardDealt"
      | "PlayerStood"
      | "Split"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "dealInitialCards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "doubleDown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDealerHand",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getGameState",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getHandValue",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getHandValue2",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerHand",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerHand2",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hitMultiple",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "placeBet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playerGames",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "resetGame", values?: undefined): string;
  encodeFunctionData(functionFragment: "split", values?: undefined): string;
  encodeFunctionData(functionFragment: "stand", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "takeInsurance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "dealInitialCards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "doubleDown", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDealerHand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGameState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHandValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHandValue2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerHand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerHand2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hitMultiple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "placeBet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerGames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resetGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "split", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stand", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "takeInsurance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;
}

export namespace DealerBustEvent {
  export type InputTuple = [player: AddressLike, finalHandValue: BigNumberish];
  export type OutputTuple = [player: string, finalHandValue: bigint];
  export interface OutputObject {
    player: string;
    finalHandValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DealerCardDealtEvent {
  export type InputTuple = [
    player: AddressLike,
    card: BigNumberish,
    handValue: BigNumberish
  ];
  export type OutputTuple = [player: string, card: bigint, handValue: bigint];
  export interface OutputObject {
    player: string;
    card: bigint;
    handValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DoubleDownEvent {
  export type InputTuple = [
    player: AddressLike,
    newBet: BigNumberish,
    handId: BigNumberish
  ];
  export type OutputTuple = [player: string, newBet: bigint, handId: bigint];
  export interface OutputObject {
    player: string;
    newBet: bigint;
    handId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameResetEvent {
  export type InputTuple = [player: AddressLike];
  export type OutputTuple = [player: string];
  export interface OutputObject {
    player: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameResultEvent {
  export type InputTuple = [
    player: AddressLike,
    result: string,
    winnings: BigNumberish
  ];
  export type OutputTuple = [player: string, result: string, winnings: bigint];
  export interface OutputObject {
    player: string;
    result: string;
    winnings: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameStartedEvent {
  export type InputTuple = [player: AddressLike, betAmount: BigNumberish];
  export type OutputTuple = [player: string, betAmount: bigint];
  export interface OutputObject {
    player: string;
    betAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InsuranceTakenEvent {
  export type InputTuple = [player: AddressLike, amount: BigNumberish];
  export type OutputTuple = [player: string, amount: bigint];
  export interface OutputObject {
    player: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerBustEvent {
  export type InputTuple = [
    player: AddressLike,
    finalHandValue: BigNumberish,
    handId: BigNumberish
  ];
  export type OutputTuple = [
    player: string,
    finalHandValue: bigint,
    handId: bigint
  ];
  export interface OutputObject {
    player: string;
    finalHandValue: bigint;
    handId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerCardDealtEvent {
  export type InputTuple = [
    player: AddressLike,
    card: BigNumberish,
    handValue: BigNumberish,
    handId: BigNumberish
  ];
  export type OutputTuple = [
    player: string,
    card: bigint,
    handValue: bigint,
    handId: bigint
  ];
  export interface OutputObject {
    player: string;
    card: bigint;
    handValue: bigint;
    handId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerStoodEvent {
  export type InputTuple = [player: AddressLike, handId: BigNumberish];
  export type OutputTuple = [player: string, handId: bigint];
  export interface OutputObject {
    player: string;
    handId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SplitEvent {
  export type InputTuple = [player: AddressLike, betAmount: BigNumberish];
  export type OutputTuple = [player: string, betAmount: bigint];
  export interface OutputObject {
    player: string;
    betAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Blackjack extends BaseContract {
  connect(runner?: ContractRunner | null): Blackjack;
  waitForDeployment(): Promise<this>;

  interface: BlackjackInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  dealInitialCards: TypedContractMethod<[], [void], "nonpayable">;

  doubleDown: TypedContractMethod<[_handId: BigNumberish], [void], "payable">;

  getDealerHand: TypedContractMethod<
    [_player: AddressLike],
    [bigint[]],
    "view"
  >;

  getGameState: TypedContractMethod<[_player: AddressLike], [bigint], "view">;

  getHandValue: TypedContractMethod<
    [_player: AddressLike, _isPlayerHand: boolean],
    [bigint],
    "view"
  >;

  getHandValue2: TypedContractMethod<[_player: AddressLike], [bigint], "view">;

  getPlayerHand: TypedContractMethod<
    [_player: AddressLike],
    [bigint[]],
    "view"
  >;

  getPlayerHand2: TypedContractMethod<
    [_player: AddressLike],
    [bigint[]],
    "view"
  >;

  hitMultiple: TypedContractMethod<
    [_numHits: BigNumberish, _handId: BigNumberish],
    [void],
    "nonpayable"
  >;

  placeBet: TypedContractMethod<[], [void], "payable">;

  playerGames: TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        boolean,
        boolean,
        boolean,
        boolean,
        bigint,
        boolean,
        boolean
      ] & {
        bet: bigint;
        state: bigint;
        lastBlockNumber: bigint;
        playerStood: boolean;
        bet2: bigint;
        hasSplit: boolean;
        playerHand1Done: boolean;
        hasDoubledDownHand1: boolean;
        hasDoubledDownHand2: boolean;
        insuranceBet: bigint;
        insuranceTaken: boolean;
        dealerHasAce: boolean;
      }
    ],
    "view"
  >;

  resetGame: TypedContractMethod<[], [void], "nonpayable">;

  split: TypedContractMethod<[], [void], "payable">;

  stand: TypedContractMethod<[_handId: BigNumberish], [void], "nonpayable">;

  takeInsurance: TypedContractMethod<[], [void], "payable">;

  withdrawAll: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "dealInitialCards"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "doubleDown"
  ): TypedContractMethod<[_handId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "getDealerHand"
  ): TypedContractMethod<[_player: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getGameState"
  ): TypedContractMethod<[_player: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getHandValue"
  ): TypedContractMethod<
    [_player: AddressLike, _isPlayerHand: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getHandValue2"
  ): TypedContractMethod<[_player: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPlayerHand"
  ): TypedContractMethod<[_player: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getPlayerHand2"
  ): TypedContractMethod<[_player: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "hitMultiple"
  ): TypedContractMethod<
    [_numHits: BigNumberish, _handId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "placeBet"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "playerGames"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        boolean,
        boolean,
        boolean,
        boolean,
        bigint,
        boolean,
        boolean
      ] & {
        bet: bigint;
        state: bigint;
        lastBlockNumber: bigint;
        playerStood: boolean;
        bet2: bigint;
        hasSplit: boolean;
        playerHand1Done: boolean;
        hasDoubledDownHand1: boolean;
        hasDoubledDownHand2: boolean;
        insuranceBet: bigint;
        insuranceTaken: boolean;
        dealerHasAce: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "resetGame"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "split"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "stand"
  ): TypedContractMethod<[_handId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "takeInsurance"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "withdrawAll"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "DealerBust"
  ): TypedContractEvent<
    DealerBustEvent.InputTuple,
    DealerBustEvent.OutputTuple,
    DealerBustEvent.OutputObject
  >;
  getEvent(
    key: "DealerCardDealt"
  ): TypedContractEvent<
    DealerCardDealtEvent.InputTuple,
    DealerCardDealtEvent.OutputTuple,
    DealerCardDealtEvent.OutputObject
  >;
  getEvent(
    key: "DoubleDown"
  ): TypedContractEvent<
    DoubleDownEvent.InputTuple,
    DoubleDownEvent.OutputTuple,
    DoubleDownEvent.OutputObject
  >;
  getEvent(
    key: "GameReset"
  ): TypedContractEvent<
    GameResetEvent.InputTuple,
    GameResetEvent.OutputTuple,
    GameResetEvent.OutputObject
  >;
  getEvent(
    key: "GameResult"
  ): TypedContractEvent<
    GameResultEvent.InputTuple,
    GameResultEvent.OutputTuple,
    GameResultEvent.OutputObject
  >;
  getEvent(
    key: "GameStarted"
  ): TypedContractEvent<
    GameStartedEvent.InputTuple,
    GameStartedEvent.OutputTuple,
    GameStartedEvent.OutputObject
  >;
  getEvent(
    key: "InsuranceTaken"
  ): TypedContractEvent<
    InsuranceTakenEvent.InputTuple,
    InsuranceTakenEvent.OutputTuple,
    InsuranceTakenEvent.OutputObject
  >;
  getEvent(
    key: "PlayerBust"
  ): TypedContractEvent<
    PlayerBustEvent.InputTuple,
    PlayerBustEvent.OutputTuple,
    PlayerBustEvent.OutputObject
  >;
  getEvent(
    key: "PlayerCardDealt"
  ): TypedContractEvent<
    PlayerCardDealtEvent.InputTuple,
    PlayerCardDealtEvent.OutputTuple,
    PlayerCardDealtEvent.OutputObject
  >;
  getEvent(
    key: "PlayerStood"
  ): TypedContractEvent<
    PlayerStoodEvent.InputTuple,
    PlayerStoodEvent.OutputTuple,
    PlayerStoodEvent.OutputObject
  >;
  getEvent(
    key: "Split"
  ): TypedContractEvent<
    SplitEvent.InputTuple,
    SplitEvent.OutputTuple,
    SplitEvent.OutputObject
  >;

  filters: {
    "DealerBust(address,uint256)": TypedContractEvent<
      DealerBustEvent.InputTuple,
      DealerBustEvent.OutputTuple,
      DealerBustEvent.OutputObject
    >;
    DealerBust: TypedContractEvent<
      DealerBustEvent.InputTuple,
      DealerBustEvent.OutputTuple,
      DealerBustEvent.OutputObject
    >;

    "DealerCardDealt(address,uint8,uint256)": TypedContractEvent<
      DealerCardDealtEvent.InputTuple,
      DealerCardDealtEvent.OutputTuple,
      DealerCardDealtEvent.OutputObject
    >;
    DealerCardDealt: TypedContractEvent<
      DealerCardDealtEvent.InputTuple,
      DealerCardDealtEvent.OutputTuple,
      DealerCardDealtEvent.OutputObject
    >;

    "DoubleDown(address,uint256,uint8)": TypedContractEvent<
      DoubleDownEvent.InputTuple,
      DoubleDownEvent.OutputTuple,
      DoubleDownEvent.OutputObject
    >;
    DoubleDown: TypedContractEvent<
      DoubleDownEvent.InputTuple,
      DoubleDownEvent.OutputTuple,
      DoubleDownEvent.OutputObject
    >;

    "GameReset(address)": TypedContractEvent<
      GameResetEvent.InputTuple,
      GameResetEvent.OutputTuple,
      GameResetEvent.OutputObject
    >;
    GameReset: TypedContractEvent<
      GameResetEvent.InputTuple,
      GameResetEvent.OutputTuple,
      GameResetEvent.OutputObject
    >;

    "GameResult(address,string,uint256)": TypedContractEvent<
      GameResultEvent.InputTuple,
      GameResultEvent.OutputTuple,
      GameResultEvent.OutputObject
    >;
    GameResult: TypedContractEvent<
      GameResultEvent.InputTuple,
      GameResultEvent.OutputTuple,
      GameResultEvent.OutputObject
    >;

    "GameStarted(address,uint256)": TypedContractEvent<
      GameStartedEvent.InputTuple,
      GameStartedEvent.OutputTuple,
      GameStartedEvent.OutputObject
    >;
    GameStarted: TypedContractEvent<
      GameStartedEvent.InputTuple,
      GameStartedEvent.OutputTuple,
      GameStartedEvent.OutputObject
    >;

    "InsuranceTaken(address,uint256)": TypedContractEvent<
      InsuranceTakenEvent.InputTuple,
      InsuranceTakenEvent.OutputTuple,
      InsuranceTakenEvent.OutputObject
    >;
    InsuranceTaken: TypedContractEvent<
      InsuranceTakenEvent.InputTuple,
      InsuranceTakenEvent.OutputTuple,
      InsuranceTakenEvent.OutputObject
    >;

    "PlayerBust(address,uint256,uint8)": TypedContractEvent<
      PlayerBustEvent.InputTuple,
      PlayerBustEvent.OutputTuple,
      PlayerBustEvent.OutputObject
    >;
    PlayerBust: TypedContractEvent<
      PlayerBustEvent.InputTuple,
      PlayerBustEvent.OutputTuple,
      PlayerBustEvent.OutputObject
    >;

    "PlayerCardDealt(address,uint8,uint256,uint8)": TypedContractEvent<
      PlayerCardDealtEvent.InputTuple,
      PlayerCardDealtEvent.OutputTuple,
      PlayerCardDealtEvent.OutputObject
    >;
    PlayerCardDealt: TypedContractEvent<
      PlayerCardDealtEvent.InputTuple,
      PlayerCardDealtEvent.OutputTuple,
      PlayerCardDealtEvent.OutputObject
    >;

    "PlayerStood(address,uint8)": TypedContractEvent<
      PlayerStoodEvent.InputTuple,
      PlayerStoodEvent.OutputTuple,
      PlayerStoodEvent.OutputObject
    >;
    PlayerStood: TypedContractEvent<
      PlayerStoodEvent.InputTuple,
      PlayerStoodEvent.OutputTuple,
      PlayerStoodEvent.OutputObject
    >;

    "Split(address,uint256)": TypedContractEvent<
      SplitEvent.InputTuple,
      SplitEvent.OutputTuple,
      SplitEvent.OutputObject
    >;
    Split: TypedContractEvent<
      SplitEvent.InputTuple,
      SplitEvent.OutputTuple,
      SplitEvent.OutputObject
    >;
  };
}
